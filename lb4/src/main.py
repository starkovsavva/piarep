def prefix_func(pat):
    print(f"----------------\nШаг 1. Вычислим префикс-функцию для образца '{pat}'.")
    lps = [0] * len(pat)
    j = 0
    i = 1
    while i < len(pat):
        print(f"Сравним символ '{pat[i]}' строки на позиции [{i}] с символом наибольшего префикс-суффикса '{pat[j]}' на позиции [{j}]:")
        if pat[i] == pat[j]:
            print(f"\t -> Обнаружено совпадение: '{pat[i]}' на позиции [{i}] = '{pat[j]}' на позиции [{j}].")
            print(f"\t -> Сдвигаемся дальше по обоим позициям [{j}] ---> [{j + 1}], [{i}] ---> [{i + 1}].")
            j += 1
            lps[i] = j
            print(f"\t -> Значение префикс-функции в ячейке [{i}] = [{j}].\n\tПолучившаяся префикс-функция: {lps}.")
            i += 1
        else:
            print(f"\t -> Символы не совпали: '{pat[i]}' на позиции [{i}] <> '{pat[j]}' на позиции [{j}].")
            if j != 0:
                print(f"\t -> Откатываемся по префикс-функции [{j}] ---> [{lps[j - 1]}].")
                j = lps[j - 1]
            else:
                print(f"\t -> Совпадений не найдено. Сдвигаемся дальше по позиции в строке [{i}] ---> [{i + 1}].")
                lps[i] = 0
                i += 1
    return lps

def kmp(pat, txt):
    lps = prefix_func(pat)
    res = []

    i = 0
    j = 0

    print(f"----------------\nШаг 2. Применим КМП для поиска вхождений '{pat}' в '{txt}'.")
    while i < len(txt):
        print(f"Сравним символ '{txt[i]}' текста на позиции [{i}] с символом образца '{pat[j]}' на позиции [{j}]:")
        if txt[i] == pat[j]:
            print(f"\t -> Обнаружено совпадение: '{txt[i]}' на позиции [{i}] = '{pat[j]}' на позиции [{j}].")
            print(f"\t -> Сдвигаемся по обоим позициям [{j}] ---> [{j + 1}], [{i}] ---> [{i + 1}].")
            i += 1
            j += 1
            if j == len(pat):
                print(f"\tОбнаружено вхождение образца '{pat}' на позиции [{i - j}].")
                print(f"\t -> Сдвигаемся по образцу в позицию [{lps[j - 1]}].")
                res.append(i - j)
                j = lps[j - 1]
        else:
            print(f"\t -> Символы не совпали: '{txt[i]}' на позиции [{i}] <> '{pat[j]}' на позиции [{j}].")
            if j != 0:
                print(f"\t -> Откатываемся по префикс-функции [{j}] ---> [{lps[j - 1]}].")
                j = lps[j - 1]
            else:
                print(f"\t -> Совпадений не найдено. Сдвигаемся дальше по позиции в строке '{txt}' [{i}] ---> [{i + 1}].")
                i += 1

    if len(res) == 0:
        print(f"Вхождений строки не было обнаружено.")
        res.append(-1)

    return res



# var = int(input("Выберите задание:\n\t1. Поиск вхождений образца.\n\t2. Проверка на циклический сдвиг.\n"))
var = 1

# p,t = [input() for _ in range(2)]
# print(",".join(map(str, kmp(p,t +t ))))

# Задание 1
if var == 1:
    pat = "ссс"
    txt = "ababcaba"
    answer = ", ".join(map(str, kmp(pat, txt)))
    print(f"----------------\nШаг 3. Вывод результатов.")
    print(f" -> Образец '{pat}' встретился в тексте '{txt}' на позициях: {answer}.")

else:
    # Задание 2
    str1 = "defabc"
    str2 = "abcdef"
    answer = ", ".join(map(str, kmp(str1,str2 + str2)))
    print(f"----------------\nШаг 3. Вывод результатов.")
    print(f" -> Циклический сдвиг '{str1}' начинается в строке '{str2}' на позиции {answer}.")
